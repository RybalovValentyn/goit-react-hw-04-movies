{"ast":null,"code":"var _jsxFileName = \"F:\\\\goit-react-hw-04-movies\\\\src\\\\views\\\\Cast.js\",\n    _s = $RefreshSig$();\n\nimport { useParams } from 'react-router-dom';\nimport { Link } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { Img } from 'react-image';\nimport * as fetcMovies from '../servises/MovieAPI';\nimport s from './views.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CastViews() {\n  _s();\n\n  const {\n    movieId\n  } = useParams();\n  const [views, setviews] = useState(null);\n  useEffect(() => {\n    fetcMovies.fetchMuvieViews(movieId).then(view => {\n      setviews(view.results);\n      console.log(view.results);\n    });\n  }, [movieId]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: views && /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: views.map(view => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: s.container,\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: view.author\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 12\n          }, this), view.author_details.avatar_path && /*#__PURE__*/_jsxDEV(Img, {\n            className: s.castImage,\n            src: [`https://image.tmdb.org/t/p/w500${view.author_details.avatar_path}`, view.author_details.avatar_path.slice(1, view.author_details.avatar_path.length)]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 13\n          }, this)]\n        }, view.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 11\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 4\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 1\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CastViews, \"Ppm7Zq9dFAgx8b8gqxJRpL5i7Uk=\", false, function () {\n  return [useParams];\n});\n\n_c = CastViews;\n{\n  /* <h2>{author.name}</h2>\r\n   <ul>\r\n   {author.books.map(book => (\r\n     <li key={book.id}>\r\n       <Link to={`/books/${book.id}`}>{book.title}</Link>\r\n     </li>\r\n   ))}\r\n  </ul> */\n} //   {view.author_details.avatar_path &&            \n//     <img src={`https://image.tmdb.org/t/p/w500${view.author_details.avatar_path}`} \n//     alt={view.author}\n//     onrror={(view.author_details.avatar_path).slice(1,(view.author_details.avatar_path).length)}  />\n//     }\n\nvar _c;\n\n$RefreshReg$(_c, \"CastViews\");","map":{"version":3,"sources":["F:/goit-react-hw-04-movies/src/views/Cast.js"],"names":["useParams","Link","useState","useEffect","Img","fetcMovies","s","CastViews","movieId","views","setviews","fetchMuvieViews","then","view","results","console","log","map","container","author","author_details","avatar_path","castImage","slice","length","id"],"mappings":";;;AAAA,SAASA,SAAT,QAA0B,kBAA1B;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAmC,OAAnC;AACA,SAAQC,GAAR,QAAkB,aAAlB;AAEA,OAAO,KAAKC,UAAZ,MAA4B,sBAA5B;AACA,OAAOC,CAAP,MAAc,oBAAd;;AAEA,eAAe,SAASC,SAAT,GAAqB;AAAA;;AAChC,QAAM;AAACC,IAAAA;AAAD,MAAaR,SAAS,EAA5B;AACA,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,IAAD,CAAlC;AAEFC,EAAAA,SAAS,CAAC,MAAM;AACdE,IAAAA,UAAU,CAACM,eAAX,CAA2BH,OAA3B,EAAoCI,IAApC,CAAyCC,IAAI,IAAI;AAC7CH,MAAAA,QAAQ,CAACG,IAAI,CAACC,OAAN,CAAR;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYH,IAAI,CAACC,OAAjB;AACD,KAHH;AAID,GALQ,EAKN,CAACN,OAAD,CALM,CAAT;AAQA,sBACE;AAAA,2BACJ;AAAA,gBACCC,KAAK,iBACH;AAAA,kBACMA,KAAK,CAACQ,GAAN,CAAUJ,IAAI,iBACb;AAAI,UAAA,SAAS,EAAEP,CAAC,CAACY,SAAjB;AAAA,kCACC;AAAA,sBAAKL,IAAI,CAACM;AAAV;AAAA;AAAA;AAAA;AAAA,kBADD,EAEJN,IAAI,CAACO,cAAL,CAAoBC,WAApB,iBACM,QAAC,GAAD;AAAK,YAAA,SAAS,EAAEf,CAAC,CAACgB,SAAlB;AACK,YAAA,GAAG,EAAE,CAAE,kCAAiCT,IAAI,CAACO,cAAL,CAAoBC,WAAY,EAAnE,EAAuER,IAAI,CAACO,cAAL,CAAoBC,WAArB,CAAkCE,KAAlC,CAAwC,CAAxC,EAA2CV,IAAI,CAACO,cAAL,CAAoBC,WAArB,CAAkCG,MAA5E,CAAtE;AADV;AAAA;AAAA;AAAA;AAAA,kBAHF;AAAA,WAAiCX,IAAI,CAACY,EAAtC;AAAA;AAAA;AAAA;AAAA,gBADD;AADN;AAAA;AAAA;AAAA;AAAA;AAFH;AAAA;AAAA;AAAA;AAAA;AADI;AAAA;AAAA;AAAA;AAAA,UADF;AAmBD;;GA/BuBlB,S;UACDP,S;;;KADCO,S;AAmClB;AAAC;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACe,C,CAEX;AACA;AACA;AAEA;AACA","sourcesContent":["import { useParams } from 'react-router-dom';\r\nimport { Link } from 'react-router-dom';\r\nimport { useState, useEffect} from 'react';\r\nimport {Img} from 'react-image'\r\n\r\nimport * as fetcMovies from '../servises/MovieAPI';\r\nimport s from './views.module.css'\r\n\r\nexport default function CastViews() {\r\n    const {movieId } = useParams();\r\n    const [views, setviews] = useState(null);\r\n\r\n  useEffect(() => {\r\n    fetcMovies.fetchMuvieViews(movieId).then(view => {\r\n        setviews(view.results);\r\n        console.log(view.results);             \r\n      });\r\n  }, [movieId]);\r\n\r\n\r\n  return (\r\n    <div >\r\n<div>\r\n{views &&  \r\n   <ul >\r\n        {views.map(view  => (\r\n          <li className={s.container} key={view.id}>\r\n           <h3>{view.author}</h3>\r\n     {view.author_details.avatar_path &&\r\n            <Img className={s.castImage}\r\n                 src={[`https://image.tmdb.org/t/p/w500${view.author_details.avatar_path}`, (view.author_details.avatar_path).slice(1,(view.author_details.avatar_path).length)]}                  \r\n             />\r\n        }\r\n          </li>\r\n        ))}\r\n    </ul>}\r\n</div>\r\n    </div>\r\n  );\r\n}\r\n\r\n    \r\n  \r\n      {/* <h2>{author.name}</h2>\r\n\r\n      <ul>\r\n        {author.books.map(book => (\r\n          <li key={book.id}>\r\n            <Link to={`/books/${book.id}`}>{book.title}</Link>\r\n          </li>\r\n        ))}\r\n      </ul> */}\r\n\r\n    //   {view.author_details.avatar_path &&            \r\n    //     <img src={`https://image.tmdb.org/t/p/w500${view.author_details.avatar_path}`} \r\n    //     alt={view.author}\r\n        \r\n    //     onrror={(view.author_details.avatar_path).slice(1,(view.author_details.avatar_path).length)}  />\r\n    //     }"]},"metadata":{},"sourceType":"module"}